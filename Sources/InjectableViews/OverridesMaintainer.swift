//
//  OverridesMaintainer.swift
//  InjectableViews
//
//  Created by mohammednassar on 28/07/2025.
//

import SwiftUI

/// A shared manager for handling view overrides in the InjectableViews system.
///
/// The `OverridesMaintainer` class is responsible for managing runtime overrides of views
/// in containers marked with `@InjectableContainer`. It stores overrides in a dictionary
/// and provides methods to update and retrieve overrides dynamically.
///
/// ### Key Features:
/// - **Runtime Overrides**: Allows views to be overridden at runtime.
/// - **Type-Safe Keys**: Works with keys generated by the `InjectableKeys` enum for type safety.
/// - **Integration with Macros**: Used internally by the `@InjectableContainer` and `@InjectableView` macros.
///
/// ### Example Usage:
/// ```swift
/// let maintainer = OverridesMaintainer()
/// maintainer.updateOverride(for: "childView", with: AnyView(Text("Overridden View")))
///
/// if let override = maintainer.override(for: "childView") {
///     // Use the overridden view
///     print("Override found: \(override)")
/// } else {
///     // Use the default view
///     print("No override found")
/// }
/// ```
///
/// - Note: This class is designed to be used internally by the `InjectableViews` system.
/// - Author: Mohamed Nassar
/// - Since: 28/07/2025
public class OverridesMaintainer {
    /// A dictionary storing overrides for injectable views.
    /// The keys are `String` identifiers, and the values are `AnyView` instances.
    private(set) var overrides: [String: AnyView] = [:]

    /// Initializes a new instance of `OverridesMaintainer`.
    public init() {}

    /// Updates the override for a specific key.
    ///
    /// - Parameters:
    ///   - key: The key associated with the override.
    ///   - view: The view to override with, wrapped in `AnyView`.
    ///
    /// ### Example:
    /// ```swift
    /// maintainer.updateOverride(for: "childView", with: AnyView(Text("Overridden View")))
    /// ```
    public func updateOverride(for key: String, with view: AnyView) {
        overrides[key] = view
    }

    /// Retrieves the override for a specific key, if it exists.
    ///
    /// - Parameter key: The key associated with the override.
    /// - Returns: The overridden view wrapped in `AnyView`, or `nil` if no override exists.
    ///
    /// ### Example:
    /// ```swift
    /// if let override = maintainer.override(for: "childView") {
    ///     // Use the overridden view
    /// }
    /// ```
    public func override(for key: String) -> AnyView? {
        overrides[key]
    }

    /// Removes the override for a given key if it exists.
    ///
    /// - Parameter key: The key associated with the override to remove.
    ///
    /// ### Example:
    /// ```swift
    /// maintainer.removeOverride(for: "childView")
    /// ```
    public func removeOverride(for key: String) {
        overrides.removeValue(forKey: key)
    }

    /// Resets all overrides, clearing the overrides dictionary.
    ///
    /// ### Example:
    /// ```swift
    /// maintainer.resetOverrides()
    /// ```
    public func resetOverrides() {
        overrides.removeAll()
    }
}
